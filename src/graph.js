// @flow
import {
  Query as BaseQuery,
  pathProxy,
  type KeyMap,
  type List,
  type Ref,
  type Atom,
  type Branch,
  type BranchPath
} from "./query.js";

// Define the shape of the JsonGraph.
// Could be autogenerated from a server schema.
export type Show = {|
  +kind: "show",
  +title: string,
  +seasonCount: number
|};

export type Movie = {|
  +kind: "movie",
  +title: string,
  +director: string
|};

export type Video = Show | Movie;

export type Romo = {|
  +match: number,
  +video: Ref<Video>,
  +artwork: Atom<{ key: string, url: string }>
|};

export type Loromo = List<Romo>;

export type Loloromo = List<Ref<Loromo>>;

export type Root = {|
  +abTests: KeyMap<boolean, number>,
  +lolomo: Ref<Loloromo>,
  +lolomosById: KeyMap<Loloromo>,
  +listsById: KeyMap<Loromo>,
  +videosById: KeyMap<Video, number>
|};

// Helpers defaulted to this graph Root
export type PathTo<Target: Branch> = BranchPath<Root, Target>;
export class Query<Result: {}, Base = Root> extends BaseQuery<
  Root,
  Base,
  Result
> {}
// should probably be opaque outside of traversPath or Query.
export const rootPath = pathProxy<Root>();
export { traversePath } from "./query.js";
